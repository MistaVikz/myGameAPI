HotStreak Game Design

I initially decided that I wanted to create a card game similar to the "double or nothing" bonus games on poker or blackjack slot machines. In these games, the dealer and the user both receive a random card. When the user sees the dealer's card, he or she guesses whether their card will be higher or lower. If the guess is correct, the user doubles their money and can continue the game or quit. 

In my original design, the user would continue to guess higher or lower until they guessed wrong. Then the game would end and the number of correct guesses would be the users high score. I initially had both the dealer's and the user's card randomly generated in the game logic and not saved to the database. This caused the problem that the user wouldn't know the dealers card before placing their guess. I solved this problem by storing the "next dealers card" in the database. The next card is randomly selected when the game is created and when the user guesses correctly. Then it's stored in the database, so that the user gets to see the card using the get_game endpoint before they make their guess.

I then decided to add to the game logic by including a bet to each move. The idea was that if the dealer had a Queen or a 3, you would be confident about your guess and bet more than if the dealer had a 6. To do this, i had to change the scoring from being the number of correct guesses to the number of points accumulated. The user would start with 10 points and then would place a bet each round. If they won, the bet would be added to their points total. This changed the goal of the game from having the longest streak to accumulating the most points before the game ends with an incorrect guess.

The biggest decision I had to make occurred when I decided to implement the "next card" feature. Ideally, I wanted to use only the new_game and the make_move endpoints for the game flow. As I described earlier, this didn't let the user see the dealer's card before guesses. My solution requires the use of the get_game endpoint to view the dealer's card before each move. This complicates the flow of the game, but still allowed me to keep all of my game logic in the make_move method.

I'm satisfied with my game design as HotStreak ended up being a slightly more complicated game then the "double or nothing" type game that I initially envisioned. While the game still depends on the luck of the draw, the addition of betting makes HotStreak less of a "guessing game" and more like a normal card game.